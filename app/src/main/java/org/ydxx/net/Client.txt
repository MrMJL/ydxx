package org.ydxx.net;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.nio.charset.CodingErrorAction;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.security.cert.X509Certificate;
import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CookieStore;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.config.ConnectionConfig;
import org.apache.http.config.MessageConstraints;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.config.SocketConfig;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.LayeredConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;

public class Client {

	private CookieStore cookieStore = null;
	private PoolingHttpClientConnectionManager connManager = null;
	private CloseableHttpClient closeableHttpClient = null;
	public final static int connectTimeout = 5000;

	public Client() {
		closeableHttpClient = createSSLInsecureClient();
	}

	public CloseableHttpClient getCloseableHttpClient() {
		return this.closeableHttpClient;
	}

	public boolean ClosecloseableHttpClient() {
		try {
			this.closeableHttpClient.close();
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public CookieStore getCookieStore() {
		return this.cookieStore;
	}
	public InputStream doGetAsInputStream(HttpGet httpget) throws ClientProtocolException,
        IOException {
		httpget.setHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0");
		CloseableHttpResponse httpResponse = closeableHttpClient.execute(httpget);
		InputStream inputStream=null;
		if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
			try {
				inputStream = httpResponse.getEntity().getContent();
			} catch (IllegalStateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return inputStream;

	}
	public String getHttpEntity2String(HttpResponse httpResponse) throws ParseException,
        IOException {
		HttpEntity entity = httpResponse.getEntity();
		String htmlString = EntityUtils.toString(entity);
		return htmlString;
	}

	public String doPostAsString(HttpPost httpPost, Map<String, String> parameterMap) throws ClientProtocolException,
        IOException {
		if (parameterMap != null) {
			UrlEncodedFormEntity postEntity = new UrlEncodedFormEntity(getParam(parameterMap), "UTF-8");
			httpPost.setEntity(postEntity);
		}

		httpPost.setHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0");

		CloseableHttpResponse httpResponse = closeableHttpClient.execute(httpPost);
		if (httpResponse.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
			return "{message:'服务器错误：" + httpResponse.getStatusLine().getStatusCode() + "',status:false}";

		}
		return getHttpEntity2String(httpResponse);
	}

	public String doPostImageAsString(HttpPost httppost, Map<String, String> stringParameterMap, Map<String, String> fileParameterMap) throws ClientProtocolException,
        IOException, JSONException {
		MultipartEntity mpEntity = new MultipartEntity();
		if(!fileParameterMap.isEmpty()){
			for (String key : fileParameterMap.keySet()) {
				mpEntity.addPart(key, new FileBody(new File(fileParameterMap.get(key))));
			}
		}
		

		for (String key : stringParameterMap.keySet()) {
			mpEntity.addPart(key, new StringBody(stringParameterMap.get(key), Charset.forName(HTTP.UTF_8)));
		}
		httppost.setEntity(mpEntity);
		CloseableHttpResponse httpResponse = closeableHttpClient.execute(httppost);
		if (httpResponse.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
			return "{message:'服务器错误：" + httpResponse.getStatusLine().getStatusCode() + "',status:false}";

		}
		return getHttpEntity2String(httpResponse);
	}

	public String doGetAsString(HttpGet httpget) throws Exception, IOException {

		httpget.setHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0");
		CloseableHttpResponse httpResponse = closeableHttpClient.execute(httpget);
		if (httpResponse.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
			return "{message:'服务器错误：" + httpResponse.getStatusLine().getStatusCode() + "',status:false}";
		}
		return getHttpEntity2String(httpResponse);
	}

	

	public CloseableHttpClient createSSLInsecureClient() {
		cookieStore = new BasicCookieStore();
		RegistryBuilder<ConnectionSocketFactory> registryBuilder = RegistryBuilder.<ConnectionSocketFactory> create();
		ConnectionSocketFactory plainSF = new PlainConnectionSocketFactory();
		registryBuilder.register("http", plainSF);
		try {
			KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
			LayeredConnectionSocketFactory sslSF = new SSLConnectionSocketFactory(SSLContexts.custom().useTLS().loadTrustMaterial(trustStore, new TrustStrategy() {
				@SuppressWarnings("unused")
				public boolean isTrusted(X509Certificate[] chain, String authType) throws
                    CertificateException {
					return true;
				}

				@Override
				public boolean isTrusted(java.security.cert.X509Certificate[] chain, String authType) throws
                    CertificateException {
					// TODO Auto-generated method stub
					return false;
				}
			}).build(), SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
			registryBuilder.register("https", sslSF);
		} catch (KeyStoreException e) {
			throw new RuntimeException(e);
		} catch (KeyManagementException e) {
			throw new RuntimeException(e);
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException(e);
		}
		Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = registryBuilder.build();
		connManager = new PoolingHttpClientConnectionManager(connectionSocketFactoryRegistry);
		SocketConfig socketConfig = SocketConfig.custom().setTcpNoDelay(true).build();
		connManager.setDefaultSocketConfig(socketConfig);
		MessageConstraints messageConstraints = MessageConstraints.custom().setMaxHeaderCount(200).setMaxLineLength(2000).build();
		ConnectionConfig connectionConfig = ConnectionConfig.custom().setMalformedInputAction(
            CodingErrorAction.IGNORE).setUnmappableInputAction(CodingErrorAction.IGNORE).setCharset(Consts.UTF_8).setMessageConstraints(messageConstraints).build();
		connManager.setDefaultConnectionConfig(connectionConfig);
		connManager.setMaxTotal(5);
		connManager.setDefaultMaxPerRoute(5);
		ConnectionKeepAliveStrategy connectionKeepAliveStrategy = new ConnectionKeepAliveStrategy() {
			public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
				return connectTimeout;
			}
		};
		// RequestConfig requestConfig =
		// RequestConfig.custom().setSocketTimeout(connectTimeout).setConnectTimeout(connectTimeout).setConnectionRequestTimeout(connectTimeout).build();
		return HttpClients.custom().setKeepAliveStrategy(connectionKeepAliveStrategy).setDefaultCookieStore(cookieStore).setConnectionManager(connManager).build();
	}

	public List<NameValuePair> getParam(Map<String, String> parameterMap) {
		List<NameValuePair> param = new ArrayList<NameValuePair>();
		Iterator<Entry<String, String>> it = parameterMap.entrySet().iterator();
		while (it.hasNext()) {
			Entry<String, String> parmEntry = (Entry<String, String>) it.next();
			param.add(new BasicNameValuePair(parmEntry.getKey(), parmEntry.getValue()));
		}
		return param;
	}

}
